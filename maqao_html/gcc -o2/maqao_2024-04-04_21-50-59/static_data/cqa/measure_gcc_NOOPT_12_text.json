{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500,
                },
            },
        },
      "AVG":
        {
          "hint":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "details": " - Constant unknown stride: 2 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                "title": "Slow data structures access",
                "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written",
              },
              {
                "workaround": " - Recompile with march=znver2.\nCQA target is AMD_fam17h_mod60h (3rd generation Ryzen 3/5/7/9 processors based on the Zen 2 microarchitecture) but specialization flags are -march=x86-64\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 32, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 32 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 32) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                "details": " - MOVHPD: 1 occurrences\n - MOVUPD: 2 occurrences\n - MOVUPS: 1 occurrences\n",
                "title": "Vector unaligned load/store instructions",
                "txt": "Detected 4 suboptimal vector unaligned load/store instructions.\n",
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "2 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (two at a time).\n",
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 4 FP arithmetical operations:\n - 2: addition or subtraction\n - 2: divide\nThe binary loop is loading 48 bytes (6 double precision FP elements).\nThe binary loop is storing 16 bytes (2 double precision FP elements).",
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.06 FP operations per loaded or stored byte.",
              },
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 11\nnb uops            : 10\nloop length        : 45\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 3\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n",
              },
              {
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 1.67 cycles\nfront end            : 1.67 cycles\n",
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3\n---------------------------------------------------------------------------------------------\nuops   | 0.75      | 0.75 | 0.75 | 0.75      | 2.00 | 2.00 | 1.00 | 0.00 | 1.00 | 1.50 | 1.50\ncycles | 0.75      | 0.75 | 0.75 | 0.75      | 2.00 | 2.00 | 1.00 | 0.00 | 1.00 | 1.50 | 1.50\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: 5.00-6.50\nCycles loading/storing data              : 2.00\nLongest recurrence chain latency (RecMII): 1.00\n",
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 1.67\nDispatch  : 2.00\nDIV/SQRT  : 5.00-6.50\nData deps.: 1.00\nOverall L1: 5.00-6.50\n",
              },
              {
                "title": "Vectorization ratios",
                "txt": "all     : 71%\nload    : 50%\nstore   : 100%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 100%\nother   : NA (no other vectorizable/vectorized instructions)\n",
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "all     : 42%\nload    : 37%\nstore   : 50%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 50%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 50%\nother   : NA (no other vectorizable/vectorized instructions)\n",
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 6.50 cycles. At this rate:\n - 11% of peak load performance is reached (7.38 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 7% of peak store performance is reached (2.46 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n",
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks.",
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 1900\n\nInstruction                | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3  | Latency | Recip. throughput\n------------------------------------------------------------------------------------------------------------------------------------------------------\nMOVSD (%RDX),%XMM0         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0    | 1       | 0.50\nMOVUPD (%R8,%RAX,1),%XMM1  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0    | 3       | 0.50\nMOVUPD (%RSI,%RAX,1),%XMM2 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0    | 3       | 0.50\nMOVHPD (%RDX,%R9,1),%XMM0  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0.50 | 0.50 | 0    | 1       | 0.50\nADD %RBX,%RDX              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0    | 1       | 0.25\nDIVPD %XMM1,%XMM0          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 1    | 13      | 5-6.50\nADDPD %XMM2,%XMM0          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0.50 | 0.50 | 3       | 0.50\nMOVUPS %XMM0,(%RSI,%RAX,1) | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0    | 4       | 1\nADD $0x10,%RAX             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0    | 1       | 0.25\nCMP %R11,%RAX              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0    | 1       | 0.25\nJNE 1900 <kernel+0xd0>     | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0    | 1       | 0.50\n",
              },
            ],
          "header":
            [
            "2% of peak computational performance is used (0.62 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))",
            ],
          "brief":
            [
            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with fassociative-math (included in Ofast or ffast-math) to extend loop vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "71% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 50% of SSE/AVX loads are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is partially vectorized.\nOnly 42% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 6.50 to 3.25 cycles (2.00x speedup).",
              },
              {
                "workaround": " - Reduce the number of division or square root instructions:\n  * If denominator is constant over iterations, use reciprocal (replace x/y with x*(1/y)). Check precision impact. This will be done by your compiler with ffast-math or Ofast\n - Check whether you really need double precision. If not, switch to single precision to speedup execution\n",
                "title": "Execution units bottlenecks",
                "txt": "Performance is limited by execution of divide and square root operations (the divide/square root unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 6.50 to 2.00 cycles (3.25x speedup).\n",
              },
            ],
          "potential":
            [
              {
                "title": "Expensive FP math instructions/calls",
                "txt": "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 6.50 to 2.00 cycles (3.25x speedup).",
              },
            ],
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "details": " - Constant unknown stride: 2 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written",
                },
                {
                  "workaround": " - Recompile with march=znver2.\nCQA target is AMD_fam17h_mod60h (3rd generation Ryzen 3/5/7/9 processors based on the Zen 2 microarchitecture) but specialization flags are -march=x86-64\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 32, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 32 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 32) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                  "details": " - MOVHPD: 1 occurrences\n - MOVUPD: 2 occurrences\n - MOVUPS: 1 occurrences\n",
                  "title": "Vector unaligned load/store instructions",
                  "txt": "Detected 4 suboptimal vector unaligned load/store instructions.\n",
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "2 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (two at a time).\n",
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 4 FP arithmetical operations:\n - 2: addition or subtraction\n - 2: divide\nThe binary loop is loading 48 bytes (6 double precision FP elements).\nThe binary loop is storing 16 bytes (2 double precision FP elements).",
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.06 FP operations per loaded or stored byte.",
                },
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 11\nnb uops            : 10\nloop length        : 45\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 3\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n",
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 1.67 cycles\nfront end            : 1.67 cycles\n",
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3\n---------------------------------------------------------------------------------------------\nuops   | 0.75      | 0.75 | 0.75 | 0.75      | 2.00 | 2.00 | 1.00 | 0.00 | 1.00 | 1.50 | 1.50\ncycles | 0.75      | 0.75 | 0.75 | 0.75      | 2.00 | 2.00 | 1.00 | 0.00 | 1.00 | 1.50 | 1.50\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: 5.00-6.50\nCycles loading/storing data              : 2.00\nLongest recurrence chain latency (RecMII): 1.00\n",
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 1.67\nDispatch  : 2.00\nDIV/SQRT  : 5.00-6.50\nData deps.: 1.00\nOverall L1: 5.00-6.50\n",
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 71%\nload    : 50%\nstore   : 100%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 100%\nother   : NA (no other vectorizable/vectorized instructions)\n",
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 42%\nload    : 37%\nstore   : 50%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 50%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 50%\nother   : NA (no other vectorizable/vectorized instructions)\n",
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 6.50 cycles. At this rate:\n - 11% of peak load performance is reached (7.38 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 7% of peak store performance is reached (2.46 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n",
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks.",
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 1900\n\nInstruction                | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3  | Latency | Recip. throughput\n------------------------------------------------------------------------------------------------------------------------------------------------------\nMOVSD (%RDX),%XMM0         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0    | 1       | 0.50\nMOVUPD (%R8,%RAX,1),%XMM1  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0    | 3       | 0.50\nMOVUPD (%RSI,%RAX,1),%XMM2 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0    | 3       | 0.50\nMOVHPD (%RDX,%R9,1),%XMM0  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0.50 | 0.50 | 0    | 1       | 0.50\nADD %RBX,%RDX              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0    | 1       | 0.25\nDIVPD %XMM1,%XMM0          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 1    | 13      | 5-6.50\nADDPD %XMM2,%XMM0          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0.50 | 0.50 | 3       | 0.50\nMOVUPS %XMM0,(%RSI,%RAX,1) | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0    | 4       | 1\nADD $0x10,%RAX             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0    | 1       | 0.25\nCMP %R11,%RAX              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0    | 1       | 0.25\nJNE 1900 <kernel+0xd0>     | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0    | 1       | 0.50\n",
                },
              ],
            "header":
              [
              "2% of peak computational performance is used (0.62 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))",
              ],
            "brief":
              [
              ],
            "gain":
              [
                {
                  "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with fassociative-math (included in Ofast or ffast-math) to extend loop vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "71% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 50% of SSE/AVX loads are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is partially vectorized.\nOnly 42% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 6.50 to 3.25 cycles (2.00x speedup).",
                },
                {
                  "workaround": " - Reduce the number of division or square root instructions:\n  * If denominator is constant over iterations, use reciprocal (replace x/y with x*(1/y)). Check precision impact. This will be done by your compiler with ffast-math or Ofast\n - Check whether you really need double precision. If not, switch to single precision to speedup execution\n",
                  "title": "Execution units bottlenecks",
                  "txt": "Performance is limited by execution of divide and square root operations (the divide/square root unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 6.50 to 2.00 cycles (3.25x speedup).\n",
                },
              ],
            "potential":
              [
                {
                  "title": "Expensive FP math instructions/calls",
                  "txt": "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 6.50 to 2.00 cycles (3.25x speedup).",
                },
              ],
          },
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /home/sami/Bureau/aoa/projet_aoa/src/kernel.c:15-16.\n",
            "It is main loop of related source loop which is unrolled by 2 (including vectorization).",
            ],
          "nb_paths": 1,
        },
    },
}
